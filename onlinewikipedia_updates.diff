21c21
< import cPickle, string, numpy, getopt, sys, random, time, re, pprint
---
> import cPickle, string, numpy, getopt, sys, random, time, re, pprint, gc
25a26,29
> # import file for easy access to browser database
> sys.path.append('<ABSOLUTE PATH TO SRC DIR>/BasicBrowser/')
> import db
> 
48c52,56
< 
---
>     
>     # Add terms and topics to the DB
>     db.add_terms(vocab)
>     db.add_topics(K)
>     
56a65
>         
58a68
>         
60a71,95
>         
>         # Arrays for adding batches of data to the DB
>         doc_array = []
>         doc_term_array = []
>         
>         for d in range(len(articlenames)):
>             doc_array.append((articlenames[d], docset[d]))
>         
>         # Add a batch of docs to the DB; this is the one DB task that is not in
>         # the separate DB write thread since later tasks depend on having doc ids.
>         # Since writes take so long, this also balaces the two threads time-wise.
>         doc_ids = db.add_docs(doc_array)
> 	
>         for d in range(len(articlenames)):        
>             for term in range(len(wordids[d])):
>                 doc_term_array.append((doc_ids[d], wordids[d][term], wordcts[d][term]))
>         
>         db.add_doc_terms(doc_term_array)
>         
>         doc_topic_array = []
>         for d in range(len(gamma)):
>             for k in range(len(gamma[d])):
>                 doc_topic_array.append((doc_ids[d], k, gamma[d][k]))
>         db.add_doc_topics(doc_topic_array)
> 
71a107,123
>             
>             topic_terms_array =[]
>             for topic in range(len(olda._lambda)):
>                 lambda_sum = sum(olda._lambda[topic])
>                 
>                 for term in range(len(olda._lambda[topic])):
>                     topic_terms_array.append((topic, term, olda._lambda[topic][term]/lambda_sum))
>             db.update_topic_terms(K, topic_terms_array)
>                 
>             db.update_topic_titles()
>             gc.collect() # probably not necesary, but precautionary for long runs
>             db.print_task_update()
>         db.increment_batch_count()
>     
>     # The DB thread ends only when it has both run out of tasks and it has been
>     # signaled that it will not be recieving any more tasks
>     db.signal_end()
